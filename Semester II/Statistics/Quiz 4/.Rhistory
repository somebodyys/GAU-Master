a <- 4
a
clear
exit
ls
clear
setwd("~/GAU-Master/Semester II/Statistics/Quiz 4")
setwd("~/GAU-Master/Semester II/Statistics/Quiz 4")
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
View(data)
View(data)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages, female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
# Calculate means
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
# Calculate standard deviations
s1 <- sd(male_ages, na.rm = TRUE)
s2 <- sd(female_ages, na.rm = TRUE)
# Sample sizes
n1 <- length(male_ages)
n2 <- length(female_ages)
# Pooled standard deviation
sp <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Standard error of the difference
se_diff <- sp * sqrt(1/n1 + 1/n2)
# Degrees of freedom
df <- n1 + n2 - 2
# Critical t-value for 90% confidence interval
t_crit <- qt(0.95, df)
# Margin of error
margin_of_error <- t_crit * se_diff
# Confidence interval for m1 - m2
ci_lower <- (m1 - m2) - margin_of_error
ci_upper <- (m1 - m2) + margin_of_error
# Output the upper bound of the confidence interval
print(ci_upper)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
# Calculate mean ages
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
# Calculate pooled standard deviation
n1 <- length(male_ages)
n2 <- length(female_ages)
s1 <- sd(male_ages)
s2 <- sd(female_ages)
s_pool <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Calculate t-value for a two-sided test at alpha = 0.05
t_value <- qt(0.975, df = n1 + n2 - 2)
# Calculate standard error
se <- sqrt(s1^2 / n1 + s2^2 / n2)
# Calculate margin of error
margin_of_error <- t_value * se
# Calculate the confidence interval
conf_int <- c((m1 - m2) - margin_of_error, (m1 - m2) + margin_of_error)
# Output the confidence interval upper bound
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
# Perform t-test assuming equal variances
t_test_result <- t.test(male_ages, female_ages, var.equal = TRUE)
# Calculate the difference in means
mean_diff <- mean(male_ages) - mean(female_ages)
# Calculate the standard error of the difference
se <- sqrt((var(male_ages) / length(male_ages)) + (var(female_ages) / length(female_ages)))
# Calculate the margin of error (using t-distribution)
margin_of_error <- qt(0.975, df = length(male_ages) + length(female_ages) - 2) * se
# Calculate the confidence interval
conf_interval <- mean_diff + c(-1, 1) * margin_of_error
# Output the upper bound of the confidence interval
upper_bound <- conf_interval[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages - female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages - female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages - female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages, female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# Task 1
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
m1 <- mean(male_ages, na.rm = TRUE)
m2 <- mean(female_ages, na.rm = TRUE)
t_test_result <- t.test(male_ages, female_ages, var.equal = TRUE, conf.level = 0.90)
conf_int <- t_test_result$conf.int
upper_bound <- conf_int[2]
print(upper_bound)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_ages <- data$age[data$gender == 'm']
female_ages <- data$age[data$gender == 'f']
# Perform two-sample t-test
t_test_result <- t.test(male_ages, female_ages, var.equal = FALSE, alternative = "greater")
# Extract the p-value
p_value <- t_test_result$p.value
# Output the p-value
print(p_value)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_high_sch_GPA <- data$high_sch_GPA[data$gender == 'm']
female_high_sch_GPA <- data$high_sch_GPA[data$gender == 'f']
# Perform two-sample t-test
t_test_result <- t.test(male_high_sch_GPA, female_high_sch_GPA, var.equal = FALSE, alternative = "less")
# Extract the p-value
p_value <- t_test_result$p.value
# Output the p-value
print(p_value)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_abortion_yes <- sum(data$abortion_legalize[data$gender == 'm'] == 'y')
female_abortion_yes <- sum(data$abortion_legalize[data$gender == 'f'] == 'y')
total_males <- sum(data$gender == 'm')
total_females <- sum(data$gender == 'f')
px <- male_abortion_yes / total_males
py <- female_abortion_yes / total_females
z_test_result <- prop.test(x = c(male_abortion_yes, female_abortion_yes), n = c(total_males, total_females), alternative = "less")
p_value <- z_test_result$p.value
p_value
nrow(subset(data, data$age == 'm' & data$abortion_legalize == 'y'))
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_abortion_supporters <- sum(data$abortion_legalize[data$gender == 'm'] == 'y')
female_abortion_supporters <- sum(data$abortion_legalize[data$gender == 'f'] == 'y')
# Calculate the total number of males and females
total_males <- sum(data$gender == 'm')
total_females <- sum(data$gender == 'f')
# Calculate proportions
px <- male_abortion_supporters / total_males
py <- female_abortion_supporters / total_females
# Calculate the pooled proportion
p_hat <- (male_abortion_supporters + female_abortion_supporters) / (total_males + total_females)
# Calculate the standard error
se <- sqrt(p_hat * (1 - p_hat) * ((1 / total_males) + (1 / total_females)))
# Calculate the test statistic
z <- (px - py) / se
# Calculate the p-value
p_value <- pnorm(z, lower.tail = TRUE)
# Output the p-value
print(p_value)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
px <- sum(data$vegeratian[data$gender == 'm'] == 'y') / sum(data$gender == 'm')
py <- sum(data$vegeratian[data$gender == 'f'] == 'y') / sum(data$gender == 'f')
pooled_p <- (sum(data$vegeratian == 'y') / length(data$vegeratian))
se <- sqrt(pooled_p * (1 - pooled_p) * (1 / sum(data$gender == 'm') + 1 / sum(data$gender == 'f')))
z <- (px - py) / se
p_value <- 2 * (1 - pnorm(abs(z)))
p_value
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
male_vegetarians <- sum(data$vegeratian[data$gender == 'm'] == 'y')
female_vegetarians <- sum(data$vegeratian[data$gender == 'f'] == 'y')
total_males <- sum(data$gender == 'm')
total_females <- sum(data$gender == 'f')
# Calculate proportions
px <- male_vegetarians / total_males
py <- female_vegetarians / total_females
# Calculate the pooled proportion
pooled_proportion <- (male_vegetarians + female_vegetarians) / (total_males + total_females)
# Calculate the standard error
se <- sqrt(pooled_proportion * (1 - pooled_proportion) * (1 / total_males + 1 / total_females))
# Calculate the test statistic
test_statistic <- (px - py) / se
# Calculate the p-value
p_value <- 2 * (1 - pnorm(abs(test_statistic)))
# Output the p-value
print(p_value)
male_vegetarians <- sum(data$vegetarian[data$gender == 'm'] == 'y')
female_vegetarians <- sum(data$vegetarian[data$gender == 'f'] == 'y')
# Count the total number of males and females
total_males <- sum(data$gender == 'm')
total_females <- sum(data$gender == 'f')
# Calculate proportions
px <- male_vegetarians / total_males
py <- female_vegetarians / total_females
# Calculate pooled proportion
p <- (male_vegetarians + female_vegetarians) / (total_males + total_females)
# Calculate standard error
se <- sqrt(p * (1 - p) * (1 / total_males + 1 / total_females))
# Calculate z-score
z <- (px - py) / se
# Calculate p-value
p_value <- 2 * (1 - pnorm(abs(z)))
# Output the p-value
print(p_value)
