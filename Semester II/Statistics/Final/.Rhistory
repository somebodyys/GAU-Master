a <- 4
a
clear
exit
ls
clear
setwd("~/GAU-Master/Semester II/Statistics/Final")
#Task 1
sample_size <- 750
#Task 1
sample_size <- 750
number_likes <- 500
lower_limit <- 0.6
upper_limit <- 0.73
p_hat <- number_likes / sample_size
ME <- (upper_limit - lower_limit) / 2
SE <- sqrt(p_hat * (1 - p_hat) / sample_size)
z_value <- ME / SE
confidence_level <- 2 * (pnorm(z_value) - 0.5)
confidence_percentage <- confidence_level * 100
confidence_percentage
#Task 1
sample_size <- 750
number_likes <- 500
lower_limit <- 0.6
upper_limit <- 0.73
p_hat <- number_likes / sample_size
ME <- (upper_limit - lower_limit) / 2
SE <- sqrt(p_hat * (1 - p_hat) / sample_size)
z_value <- ME / SE
confidence_level <- 2 * (pnorm(z_value) - 0.5)
confidence_percentage <- confidence_level * 100
confidence_percentage
# Given values
n <- 750
phat <- 500 / 750
lower_bound <- 0.6
upper_bound <- 0.73
# Calculate standard error (SE)
SE <- sqrt(phat * (1 - phat) / n)
# Calculate margin of error (ME)
ME <- phat - lower_bound
# Calculate Z-value
Z <- ME / SE
# Find the confidence level
confidence_level <- 2 * (pnorm(Z) - 0.5) * 100
# Output the confidence level
confidence_level
#Task 1
sample_size <- 750
number_likes <- 500
lower_limit <- 0.6
upper_limit <- 0.73
p_hat <- number_likes / sample_size
ME <- (upper_limit - lower_limit) / 2
SE <- sqrt(p_hat * (1 - p_hat) / sample_size)
z_value <- ME / SE
confidence_level <- 2 * (pnorm(z_value) - 0.5)
confidence_percentage <- confidence_level * 100
confidence_percentage
#Task 1
sample_size <- 750
number_likes <- 500
lower_limit <- 0.6
upper_limit <- 0.73
p_hat <- number_likes / sample_size
ME <- (upper_limit - lower_limit) / 2
SE <- sqrt(p_hat * (1 - p_hat) / sample_size)
z_value <- ME / SE
confidence_level <- 2 * (pnorm(z_value) - 0.5)
confidence_percentage <- confidence_level * 100
confidence_percentage
#Task 1
sample_size <- 750
number_likes <- 500
lower_limit <- 0.6
upper_limit <- 0.73
p_hat <- number_likes / sample_size
ME <- (upper_limit - lower_limit) / 2
SE <- sqrt(p_hat * (1 - p_hat) / sample_size)
z_value <- ME / SE
confidence_level <- 2 * (pnorm(z_value) - 0.5)
confidence_percentage <- confidence_level * 100
confidence_percentage
# Task 2
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
View(data)
View(data)
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
ages_male <- data$age[data$gender == "m"]
ages_female <- data$age[data$gender == "f"]
t_test_result <- t.test(ages_male, ages_female, var.equal = TRUE)
p_value <- t_test_result$p.value
p_value
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
high_sch_GPA_male <- data$high_sch_GPA[data$gender == "m"]
high_sch_GPA_female <- data$high_sch_GPA[data$gender == "f"]
t_test_result <- t.test(high_sch_GPA_male, high_sch_GPA_female, var.equal = TRUE, alternative = "less")
p_value <- t_test_result$p.value
p_value
high_sch_GPA_male <- data$high_sch_GPA[data$gender == "m"]
high_sch_GPA_female <- data$high_sch_GPA[data$gender == "f"]
t_test_result <- t.test(high_sch_GPA_male, high_sch_GPA_female, var.equal = TRUE)
conf_interval <- t_test_result$conf.int
conf_interval
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
high_sch_GPA_male <- data$high_sch_GPA[data$gender == "m"]
high_sch_GPA_female <- data$high_sch_GPA[data$gender == "f"]
t_test_result <- t.test(high_sch_GPA_male, high_sch_GPA_female, var.equal = TRUE)
conf_interval <- t_test_result$conf.int
conf_interval
high_sch_GPA_male <- data$high_sch_GPA[data$gender == "m"]
high_sch_GPA_female <- data$high_sch_GPA[data$gender == "f"]
t_test_result <- t.test(high_sch_GPA_male, high_sch_GPA_female, var.equal = TRUE, conf.level = 0.99)
conf_interval <- t_test_result$conf.int
conf_interval
high_sch_GPA_male <- data$high_sch_GPA[data$gender == "m"]
high_sch_GPA_female <- data$high_sch_GPA[data$gender == "f"]
t_test_result <- t.test(high_sch_GPA_male, high_sch_GPA_female, var.equal = TRUE, conf.level = 0.99)
conf_interval <- t_test_result$conf.int
conf_interval
px <- mean(data$abortion_legalize[data$gender == "m"] == "y")
py <- mean(data$abortion_legalize[data$gender == "f"] == "y")
prop_test_result <- prop.test(x = c(sum(data$abortion_legalize[data$gender == "m"] == "y"),
sum(data$abortion_legalize[data$gender == "f"] == "y")),
n = c(length(data$abortion_legalize[data$gender == "m"]),
length(data$abortion_legalize[data$gender == "f"])),
alternative = "less")
p_value <- prop_test_result$p.value
p_value
px <- mean(data$abortion_legalize[data$gender == "m"] == "y")
py <- mean(data$abortion_legalize[data$gender == "f"] == "y")
n1 <- sum(data$gender == "m")
n2 <- sum(data$gender == "f")
pooled_prop <- (sum(data$abortion_legalize == "y")) / (n1 + n2)
se <- sqrt(pooled_prop * (1 - pooled_prop) * (1/n1 + 1/n2))
t_critical <- qt(0.975, df = n1 + n2 - 2)
margin_of_error <- t_critical * se
conf_interval <- c((px - py) - margin_of_error, (px - py) + margin_of_error)
conf_interval
lb <- 0.01  # Lower bound of the confidence interval
ub <- 0.05  # Upper bound of the confidence interval
# Calculate confidence interval percentage
confidence_interval_percentage <- (ub - lb) * 100
confidence_interval_percentage
lower_bound <- 0.01
upper_bound <- 0.05
# Calculate confidence interval percentage
confidence_level <- (1 - upper_bound + lower_bound) * 100
# Output the confidence interval percentage
confidence_level
p1_hat <- 0.28    # Proportion from sample 1
n1 <- 500         # Sample size for sample 1
p2_hat <- 0.25    # Proportion from sample 2
n2 <- 600         # Sample size for sample 2
# Calculate z-score for 96% confidence level (two-tailed)
z <- qnorm(0.96 + (1 - 0.96) / 2)
# Calculate standard error for the difference in proportions
se <- sqrt(p1_hat * (1 - p1_hat) / n1 + p2_hat * (1 - p2_hat) / n2)
# Calculate margin of error
margin_of_error <- z * se
# Calculate confidence interval
conf_interval <- c((p1_hat - p2_hat) - margin_of_error, (p1_hat - p2_hat) + margin_of_error)
# Output the confidence interval
conf_interval
p1_hat <- 0.28
n1 <- 500
p2_hat <- 0.25
n2 <- 600
lower_bound <- 0.01
upper_bound <- 0.05
p_diff_hat <- p1_hat - p2_hat
se <- sqrt((p1_hat * (1 - p1_hat)) / n1 + (p2_hat * (1 - p2_hat)) / n2)
z_upper <- qnorm(1 - (upper_bound / 2))
z_lower <- qnorm(lower_bound / 2)
confidence_level <- 1 - (2 * pnorm(-abs(p_diff_hat / se)))
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4         # Sample size for sample 1
n2 <- 9         # Sample size for sample 2
x1_bar <- 25    # Sample mean for sample 1
x2_bar <- 26    # Sample mean for sample 2
s1 <- 2         # Sample standard deviation for sample 1
s2 <- 5         # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
s_pooled <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
se <- s_pooled * sqrt(1/n1 + 1/n2)
t_lower <- qt(lower_bound, df = n1 + n2 - 2)
t_upper <- qt(upper_bound, df = n1 + n2 - 2)
confidence_level <- 1 - (t_upper - t_lower)
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4         # Sample size for sample 1
n2 <- 9         # Sample size for sample 2
x1_bar <- 25    # Sample mean for sample 1
x2_bar <- 26    # Sample mean for sample 2
s1 <- 2         # Sample standard deviation for sample 1
s2 <- 5         # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
s_pooled <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
se <- s_pooled * sqrt(1/n1 + 1/n2)
t_lower <- qt(lower_bound, df = n1 + n2 - 2)
t_upper <- qt(upper_bound, df = n1 + n2 - 2)
confidence_level <- 1 - (t_upper - t_lower)
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4         # Sample size for sample 1
n2 <- 9         # Sample size for sample 2
x1_bar <- 25    # Sample mean for sample 1
x2_bar <- 26    # Sample mean for sample 2
s1 <- 2         # Sample standard deviation for sample 1
s2 <- 5         # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
# Calculate the pooled standard deviation
s_pooled <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Calculate the standard error (assuming equal variances)
se <- s_pooled * sqrt(1/n1 + 1/n2)
# Calculate the t critical values for the confidence interval
t_lower <- qt(lower_bound / 2, df = n1 + n2 - 2)
t_upper <- qt(upper_bound / 2, df = n1 + n2 - 2)
# Calculate the confidence level based on the t critical values
confidence_level <- 1 - (t_upper - t_lower)
# Output the confidence level as percentage
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4         # Sample size for sample 1
n2 <- 9         # Sample size for sample 2
x1_bar <- 25    # Sample mean for sample 1
x2_bar <- 26    # Sample mean for sample 2
s1 <- 2         # Sample standard deviation for sample 1
s2 <- 5         # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
# Calculate the pooled standard deviation
s_pooled <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Calculate the standard error (assuming equal variances)
se <- s_pooled * sqrt(1/n1 + 1/n2)
# Calculate the t critical values for the confidence interval
t_lower <- qt(lower_bound / 2, df = n1 + n2 - 2)
t_upper <- qt(upper_bound / 2, df = n1 + n2 - 2)
# Calculate the confidence level based on the t critical values
confidence_level <- 1 - (t_upper - t_lower)
# Output the confidence level as percentage
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4        # Sample size for sample 1
n2 <- 9        # Sample size for sample 2
x1_bar <- 25   # Sample mean for sample 1
x2_bar <- 26   # Sample mean for sample 2
s1 <- 2        # Sample standard deviation for sample 1
s2 <- 5        # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
# Calculate the pooled standard deviation
s_pool <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Calculate the standard error
se <- s_pool * sqrt(1/n1 + 1/n2)
# Calculate t critical value for the upper bound of the confidence interval
t_upper <- qt(upper_bound, df = n1 + n2 - 2)
# Calculate t critical value for the lower bound of the confidence interval
t_lower <- qt(lower_bound, df = n1 + n2 - 2)
# Calculate the confidence level
confidence_level <- 1 - (2 * pt(-abs((x1_bar - x2_bar) / se), df = n1 + n2 - 2))
# Output the confidence level as percentage
confidence_level_percent <- confidence_level * 100
confidence_level_percent
n1 <- 4        # Sample size for sample 1
n2 <- 9        # Sample size for sample 2
x1_bar <- 25   # Sample mean for sample 1
x2_bar <- 26   # Sample mean for sample 2
s1 <- 2        # Sample standard deviation for sample 1
s2 <- 5        # Sample standard deviation for sample 2
# Given confidence interval bounds
lower_bound <- 0.97
upper_bound <- 1.03
# Calculate the pooled standard deviation
s_pool <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
# Calculate the standard error
se <- s_pool * sqrt(1/n1 + 1/n2)
# Calculate t critical value for the upper bound of the confidence interval
t_upper <- qt(upper_bound, df = n1 + n2 - 2)
# Calculate t critical value for the lower bound of the confidence interval
t_lower <- qt(lower_bound, df = n1 + n2 - 2)
# Calculate the confidence level
confidence_level <- 1 - (2 * pt(-abs((x1_bar - x2_bar) / se), df = n1 + n2 - 2))
# Output the confidence level as percentage
confidence_level_percent <- confidence_level * 100
confidence_level_percent
