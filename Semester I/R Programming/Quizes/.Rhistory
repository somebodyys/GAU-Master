a <- 4
a
clear
exit
ls
clear
setwd("~/GAU Master/Semester I/R Programming/Quizes")
# Check if the calculator is red
if(selected_calculator == "Red") {
picked_red_calculator <- picked_red_calculator + 1
# Check if the selected box is the one with 5 red calculators
if(length(selected_box[[1]]) == 6 && sum(selected_box[[1]] == "Red") == 5) {
chosen_5_red_box <- chosen_5_red_box + 1
}
}
# Set the number of simulations
n_simulations <- 100000
# Define the boxes
boxes <- list(replicate(9, c("Red", "Red", "Green", "Green")), c("Red", "Red", "Red", "Red", "Red", "Green"))
# Initialize counters
chosen_5_red_box <- 0
picked_red_calculator <- 0
# Simulation
for(i in 1:n_simulations) {
# Randomly select a box
selected_box <- sample(boxes, size = 1, replace = TRUE)
# Randomly select a calculator from the chosen box
selected_calculator <- sample(selected_box[[1]], size = 1)
# Check if the calculator is red
if(selected_calculator == "Red") {
picked_red_calculator <- picked_red_calculator + 1
# Check if the selected box is the one with 5 red calculators
if(length(selected_box[[1]]) == 6 && sum(selected_box[[1]] == "Red") == 5) {
chosen_5_red_box <- chosen_5_red_box + 1
}
}
}
# Calculate the probability
probability <- chosen_5_red_box / picked_red_calculator
# Print the probability
print(paste("The estimated probability is:", probability))
5/32
xlear
boxes
clear
c(replicate(9, c("Red", "Red", "Green", "Green")), c("Red", "Red", "Red", "Red", "Red", "Green"))
clear
list(replicate(9, c("Red", "Red", "Green", "Green")), c("Red", "Red", "Red", "Red", "Red", "Green"))
sample(boxes, size = 1, replace = TRUE)
sample(boxes, size = 1, replace = TRUE)
sample(boxes, size = 1, replace = TRUE)
sample(boxes, size = 1, replace = TRUE)
boxes
clear
10/32
5/21
5/32
# Set the number of simulations
n_simulations <- 100000
# Define the boxes
# 9 boxes with 2 red and 2 green calculators
# 1 box with 5 red and 1 green calculator
boxes <- replicate(9, c("Red", "Red", "Green", "Green"), simplify = FALSE)
boxes <- c(boxes, list(c("Red", "Red", "Red", "Red", "Red", "Green")))
# Initialize counters
chosen_5_red_box <- 0
picked_red_calculator <- 0
# Simulation
set.seed(123)  # for reproducibility
for(i in 1:n_simulations) {
# Randomly select a box
selected_box <- sample(boxes, size = 1, replace = TRUE)[[1]]
# Randomly select a calculator from the chosen box
selected_calculator <- sample(selected_box, size = 1)
# Check if the calculator is red
if(selected_calculator == "Red") {
picked_red_calculator <- picked_red_calculator + 1
# Check if the selected box is the one with 5 red calculators
if(length(selected_box) == 6 && sum(selected_box == "Red") == 5) {
chosen_5_red_box <- chosen_5_red_box + 1
}
}
}
# Calculate the probability
probability <- chosen_5_red_box / picked_red_calculator
# Print the probability
print(paste("The estimated probability is:", probability))
5/52
5/32
clear
boxes
# Set the number of simulations
n_simulations <- 100000
# Define the boxes
# 9 boxes with 2 red and 2 green calculators
# 1 box with 5 red and 1 green calculator
boxes <- replicate(9, c("Red", "Red", "Green", "Green"), simplify = FALSE)
boxes <- c(boxes, list(c("Red", "Red", "Red", "Red", "Red", "Green")))
# Initialize counters
chosen_5_red_box <- 0
picked_red_calculator <- 0
# Simulation
for(i in 1:n_simulations) {
# Randomly select a box
selected_box <- sample(boxes, size = 1, replace = TRUE)[[1]]
# Randomly select a calculator from the chosen box
selected_calculator <- sample(selected_box, size = 1)
# Check if the calculator is red
if(selected_calculator == "Red") {
picked_red_calculator <- picked_red_calculator + 1
# Check if the selected box is the one with 5 red calculators
if(length(selected_box) == 6 && sum(selected_box == "Red") == 5) {
chosen_5_red_box <- chosen_5_red_box + 1
}
}
}
# Calculate the probability
probability <- chosen_5_red_box / picked_red_calculator
# Print the probability
print(paste("The estimated probability is:", probability))
# Set the number of simulations
n_simulations <- 100000
# Game parameters
initial_budget <- 5
target <- 20
loss_count <- 0
# Simulation
for(i in 1:n_simulations) {
budget <- initial_budget
while(budget > 0 && budget < target) {
# Simulate a coin flip (1 for heads, 0 for tails)
flip <- sample(c(1, 0), size = 1, replace = TRUE)
# Update budget based on guess (assuming a 50/50 guess strategy)
if(flip == 1) {
budget <- budget + 1  # Win $1
} else {
budget <- budget - 1  # Lose $1
}
}
# Check if the player lost all the money
if(budget == 0) {
loss_count <- loss_count + 1
}
}
# Calculate the probability of losing all the money
probability_lose <- loss_count / n_simulations
# Print the probability
print(paste("The estimated probability of losing all the money is:", probability_lose))
