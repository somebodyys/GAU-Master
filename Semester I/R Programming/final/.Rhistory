a <- 4
a
clear
exit
ls
clear
setwd("~/GAU Master/Semester I/R Programming/final")
clear
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
View(data)
View(data)
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
tvCategories
View(data)
View(data)
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
sportsCategories
min(c(1,2))
minByDistanceResidence <- min(subset(data, tvCategories == 'A' & sportsCategories == 'n')$distance_residence)
minByDistanceResidence
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
# Task 1
# გამოიტანეთ მონაცემები (მონაცემების ჩარჩო), რომლებიც ეკუთვნიან A
# კატეგორიას და n კატეგორიას. ამ მონაცემების ჩარჩოდან
# distance_residence -ის მინიმუმი ტოლია
minByDistanceResidence <- min(subset(data, tvCategories == 'A' & sportsCategories == 'n')$distance_residence)
print('Task 1 = ', minByDistanceResidence)
# Task 1
# გამოიტანეთ მონაცემები (მონაცემების ჩარჩო), რომლებიც ეკუთვნიან A
# კატეგორიას და n კატეგორიას. ამ მონაცემების ჩარჩოდან
# distance_residence -ის მინიმუმი ტოლია
minByDistanceResidence <- min(subset(data, tvCategories == 'A' & sportsCategories == 'n')$distance_residence)
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
# Task 1
# გამოიტანეთ მონაცემები (მონაცემების ჩარჩო), რომლებიც ეკუთვნიან A
# კატეგორიას და n კატეგორიას. ამ მონაცემების ჩარჩოდან
# distance_residence -ის მინიმუმი ტოლია
minByDistanceResidence <- min(subset(data, tvCategories == 'A' & sportsCategories == 'n')$distance_residence)
totalKCategoryMaleStudents <- length(subset(data, sportsCategories == 'k' & data$gender == 'm'))
totalKCategoryRepublicanMales <- length(subset(data, sportsCategories == 'k' & data$gender == 'm' & data$political_affiliation == 'r'))
answerTwo <- totalKCategoryRepublicanMales / totalKCategoryMaleStudents * 100
answerTwo
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
totalKCategoryMaleStudents <- length(subset(data, sportsCategories == 'k' & data$gender == 'm'))
totalKCategoryMaleStudents
totalKCategoryRepublicanMales <- length(subset(data, sportsCategories == 'k' & data$gender == 'm' & data$political_affiliation == 'r'))
totalKCategoryRepublicanMales
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
sportsCategories
totalKCategoryMaleStudents <- length(subset(data, sportsCategories == 'k' & data$gender == 'm')$gender)
totalKCategoryRepublicanMales <- length(subset(data, sportsCategories == 'k' & data$gender == 'm' & data$political_affiliation == 'r')$gender)
answerTwo <- totalKCategoryRepublicanMales / totalKCategoryMaleStudents * 100
answerTwo
nonReligiousMCategoryStudents <- length(subset(data, data$religiosity == 0 & sportsCategories == 'm')$life_after_death)
nonReligiousMCategoryLifeAfterDeath <- length(subset(data, data$religiosity == 0 & sportsCategories == 'm' & data$life_after_death == 'y')$life_after_death)
answerThree <- nonReligiousMCategoryLifeAfterDeath / nonReligiousMCategoryStudents * 100
answerThree
mCategoryWomen <- length(subset(data, data$gender == 'f' & sportsCategories == 'm')$gender)
mCategoryWomenLifeAfterDeath <- length(subset(data, data$gender == 'f' & sportsCategories == 'm' & data$life_after_death == 'y')$gender)
answerFour <- mCategoryWomenLifeAfterDeath / mCategoryWomen * 100
answerFour
republicanWomen <- length(subset(data, data$gender == 'f' & data$political_affiliation == 'r')$abortion_legalize)
republicanWomenAborLegalize <- length(subset(data, data$gender == 'f' & data$political_affiliation == 'r' & data$abortion_legalize == 'y')$abortion_legalize)
answerFive <- republicanWomenAborLegalize / republicanWomen * 100
answerFive
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
republicanWomen <- length(subset(data, data$gender == 'f' & data$political_affiliation == 'r')$gender)
republicanWomenAbortLegalize <- length(subset(data, data$gender == 'f' & data$political_affiliation == 'r' & data$abortion_legalize == 'y')$gender)
answerFive <- republicanWomenAbortLegalize / republicanWomen * 100
answerFive
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
3 / 6
true | FALSE
TRUE | FALSE
FALSE | FALSE
taskSixSubSet <- subset(data, (tvCategories == 'A' & data$gender == 'm' & data$political_affiliation != 'r') | (sportsCategories == 'n' & data$gender == 'f'))
taskSixSubSetLength <- length(taskThreeSubSet$gender)
taskSixSubSet <- subset(data, (tvCategories == 'A' & data$gender == 'm' & data$political_affiliation != 'r') | (sportsCategories == 'n' & data$gender == 'f'))
taskSixSubSetLength <- length(taskSixSubSet$gender)
taskSixSubSetAbortLegalizeLength <- length(subset(taskSixSubSet, taskSixSubSet$abortion_legalize == 'y')$gender)
answerSix <- taskSixSubSetAbortLegalizeLength / taskSixSubSetLength * 100
answerSix
taskSixSubSetAbortLegalizeLength
# Load Data
data <- read.csv("fl_student_survey.csv", header=TRUE, sep=",", dec=".")
# TV სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,4) ინტერვალში, მიანიჭეთ A კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [4,7) ინტერვალში მიანიჭეთ B კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [7-10) ინტერვალში მიანიჭეთ C
# კატეგორია, მონაცემებს, რომლებიც ჩავარდებიან [10-38) ინტერვალში
# მიანიჭეთ D კატეგორია.
tvIntervals <- c(0, 4, 7, 10, 38)
tvLabels <- c('A', 'B', 'C', 'D')
tvCategories <- cut(data$TV, breaks = tvIntervals, labels = tvLabels, right = FALSE)
# Sports სვეტი დაყავით კატეგორიების მიხედვით. იმ მონაცემებს, რომლებიც
# ჩავარდებიან [0,7) ინტერვალში, მიანიჭეთ k კატეგორია. მონაცემებს,
# რომლებიც ჩავარდებიან [7,9) ინტერვალში მიანიჭეთ m კატეგორია.
# მონაცემებს, რომლებიც ჩავარდებიან [9,17) ინტერვალში მიანიჭეთ n
# კატეგორია.
sportsIntervals <- c(0, 7, 9, 17)
sportsLabels <- c('k', 'm', 'n')
sportsCategories <- cut(data$sports, breaks = sportsIntervals, labels = sportsLabels, right = FALSE)
taskSixSubSet <- subset(data, (tvCategories == 'A' & data$gender == 'm' & data$political_affiliation != 'r') | (sportsCategories == 'n' & data$gender == 'f'))
taskSixSubSet <- subset(data, (tvCategories == 'A' & data$gender == 'm' & data$political_affiliation != 'r') | (sportsCategories == 'n' & data$gender == 'f'))
answerSix <- length(subset(taskSixSubSet, taskSixSubSet$abortion_legalize == 'y'))
answerSix\
answerSix
answerSix <- length(subset(taskSixSubSet, taskSixSubSet$abortion_legalize == 'y')$gender)
answerSix
c(red = 6, green = 2)
# Set initial counts for each box
initial_count_A <- c(red = 6, green = 2)
initial_count_B <- c(red = 4, green = 3)
# Number of simulations
num_simulations <- 10000
# Initialize counters for red ball and total draws
red_count <- 0
total_draws <- 0
# Simulation loop
for (i in 1:num_simulations) {
# Simulate rolling a die
die_result <- sample(1:6, 1)
# Determine which box to draw from based on the die result
if (die_result %% 2 == 0) {
box <- "A"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_A / sum(initial_count_A))
} else {
box <- "B"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_B / sum(initial_count_B))
}
# Update counts
total_draws <- total_draws + 1
if (ball_color == "red") {
red_count <- red_count + 1
}
}
# Calculate probability of drawing a red ball
probability_red <- red_count / total_draws
# Print the result
cat("Probability of drawing a red ball:", probability_red, "\n")
37/56
initial_count_B / sum(initial_count_B)
# Set initial counts for each box
initial_count_A <- c(red = 6, green = 2)
initial_count_B <- c(red = 4, green = 3)
# Number of simulations
num_simulations <- 10000
# Initialize counters for red ball, total draws, and draws from Box B
red_count <- 0
total_draws <- 0
draws_from_B <- 0
# Simulation loop
for (i in 1:num_simulations) {
# Simulate rolling a die
die_result <- sample(1:6, 1)
# Determine which box to draw from based on the die result
if (die_result %% 2 == 0) {
box <- "A"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_A / sum(initial_count_A))
} else {
box <- "B"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_B / sum(initial_count_B))
}
# Update counts
total_draws <- total_draws + 1
if (ball_color == "red") {
red_count <- red_count + 1
if (box == "B") {
draws_from_B <- draws_from_B + 1
}
}
}
# Calculate probability of drawing from Box B given that the ball is red
probability_from_B_given_red <- draws_from_B / red_count
# Print the result
cat("Probability of drawing from Box B given that the ball is red:", probability_from_B_given_red, "\n")
16/37
initial_count_A <- c(red = 6, green = 2)
initial_count_B <- c(red = 4, green = 3)
num_simulations <- 10000
red_count <- 0
total_draws <- 0
draws_from_B <- 0
for (i in 1:num_simulations) {
die_result <- sample(1:6, 1)
if (die_result %% 2 == 0) {
box <- "A"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_A / sum(initial_count_A))
} else {
box <- "B"
ball_color <- sample(c("red", "green"), 1, prob = initial_count_B / sum(initial_count_B))
}
total_draws <- total_draws + 1
if (ball_color == "red") {
red_count <- red_count + 1
if (box == "B") {
draws_from_B <- draws_from_B + 1
}
}
}
probability_red <- red_count / total_draws
probability_from_B_given_red <- draws_from_B / red_count
cat("წითელი ბურთის ამოღების ალბათობა: ", probability_red, "\n")
cat("ალბათობა რომ ბურთი ამოღებული იყო B ყუთიდან: ", probability_from_B_given_red, "\n")
16/37
37/56
